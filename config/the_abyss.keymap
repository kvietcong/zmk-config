// vim: set ft=dts:
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BAS  0
#define GA1  1
#define GA2  2
#define GA3  3
#define _NUM 4
#define FUN  5
#define SYM  6
#define _NAV 7

#define NUM     8
#define NUM_LCK 9
#define NAV     10
#define NAV_LCK 11

/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BAS";
            bindings = <
                &kp Q      &kp W      &kp E       &kp R      &kp T   /* */ &kp Y   &kp U      &kp I         &kp O      &kp P
                &hm LWIN A &hm LALT S &hm LSHFT D &hm LCTL F &kp G   /* */ &kp H   &hm RCTL J &hm RSHFT K   &hm RALT L &hm RWIN SEMI
                &kp Z      &kp X      &kp C       &kp V      &kp B   /* */ &kp N   &kp M      &kp COMMA     &kp DOT    &kp SLASH
                                      &et_l FUN 0 &kp SPACE  &sl NUM /* */ &sl SYM &kp BSPC   &lt NAV ENTER
            >;
        };

        game1_layer {
            label = "GA1";
            bindings = <
                &kp Q     &kp W     &kp E       &kp R  &kp T   /* */ &kp Y  &kp U  &kp I     &kp O     &kp P
                &kp A     &kp S     &kp D       &kp F  &kp G   /* */ &kp H  &kp J  &kp K     &kp L     &kp SEMI
                &kp Z     &kp X     &kp C       &kp V  &kp B   /* */ &kp N  &kp M  &kp COMMA &kp DOT   &kp SLASH
                                    &et_l GA3 0 &trans &sl GA2 /* */ &trans &trans &trans
            >;
        };

        game2_layer {
            label = "GA2";
            bindings = <
                &kp LCTL &kp N1 &trans  &kp N2 &kp N0    /* */ &trans &trans &trans &trans &trans
                &kp LSFT &trans &trans  &trans &kp N3    /* */ &trans &trans &trans &trans &trans
                &kp LALT &kp N5 &kp TAB &kp N4 &kp GRAVE /* */ &trans &trans &trans &trans &trans
                                &trans  &trans &sl GA3   /* */ &trans &trans &trans
            >;
        };

        game3_layer {
            label = "GA3";
            bindings = <
                &trans &trans       &trans   &trans &to BAS /* */ &trans &trans &trans &trans &trans
                &trans &kp LS(F2)   &n0_     &kp F2 &trans  /* */ &trans &trans &trans &trans &trans
                &trans &kp LA(HOME) &kp LGUI &f1_   &trans  /* */ &trans &trans &trans &trans &trans
                                    &trans   &trans &sl NUM /* */ &trans &trans &trans
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
                &kp N6 &kp N7 &kp N8       &kp N9  &trans  /* */ &kp KP_PLUS &kp N7 &kp N8       &kp N9 &kp KP_MULTIPLY
                &kp N1 &kp N2 &kp N3       &kp N4  &kp N5  /* */ &kp EQUAL   &kp N4 &kp N5       &kp N6 &kp DOT
                &trans &trans &trans       &kp N0  &trans  /* */ &kp MINUS   &kp N1 &kp N2       &kp N3 &kp SLASH
                              &tog NUM_LCK &kp DEL &sl FUN /* */ &sl SYM     &kp N0 &tog NUM_LCK
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
                &trans &trans &trans &trans &to GA1 /* */ &kp C_MUTE &kp PSCRN     &kp PAUSE_BREAK &kp KP_NUMLOCK  &kp C_VOL_UP
                &trans &trans &trans &trans &trans  /* */ &bt_sel    &f1_          &f5_            &f9_            &media
                &trans &trans &trans &trans &trans  /* */ &bt BT_CLR &kp LG(LS(S)) &kp LG(L)       &kp LC(LS(ESC)) &kp C_VOL_DN
                              &trans &trans &sl SYM /* */ &sl SYM    &output       &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
                &kp BACKSLASH &kp SQT   &kp LBKT &kp RBKT &trans    /* */ &trans  &trans  &trans &trans &trans
                &kp GRAVE     &kp UNDER &kp LPAR &kp RPAR &kp TILDE /* */ &trans  &trans  &trans &trans &trans
                &kp PIPE      &kp DQT   &kp LBRC &kp RBRC &trans    /* */ &trans  &trans  &trans &trans &trans
                                        &trans   &trans   &sl NUM   /* */ &sl NAV &kp TAB &trans
            >;
        };

        navigation_layer {
            label = "NAV";
            bindings = <
                &kp INS &kp HOME &kp UP       &kp END   &trans    /* */ &trans   &trans   &trans       &trans    &trans
                &kp TAB &kp LEFT &kp DOWN     &kp RIGHT &kp PG_UP /* */ &kp LEFT &kp DOWN &kp UP       &kp RIGHT &trans
                &kp DEL &trans   &trans       &trans    &kp PG_DN /* */ &trans   &trans   &trans       &trans    &trans
                                 &tog NAV_LCK &trans    &sl NUM   /* */ &sl NUM  &trans   &tog NAV_LCK
            >;
        };

        // Entry points for layers with layer locking
        num { label = "NUM"; bindings = <&trans>; };
        num_lck { label = "<NUM>"; bindings = <&trans>; };

        nav { label = "NAV"; bindings = <&trans>; };
        nav_lck { label = "<NAV>"; bindings = <&trans>; };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        num { if-layers = <NUM>; then-layer = <_NUM>; };
        num_lck { if-layers = <NUM_LCK>; then-layer = <_NUM>; };

        nav { if-layers = <NAV>; then-layer = <_NAV>; };
        nav_lck { if-layers = <NAV_LCK>; then-layer = <_NAV>; };
    };

    /*                KEY POSITIONS

      ╭────────────────────╮ ╭────────────────────╮
      │  0   1   2   3   4 │ │  5   6   7   8   9 │
      │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
      │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
      ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
              ╰────────────╯ ╰────────────╯        */

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT, LAYERS) \
            combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
                layers = <LAYERS>; \
                slow-release; \
            };

        #define DEFAULT_TIME 50
        #define LONG_TIME 100
        #define LWIN_LAYERS BAS GA3 _NUM FUN SYM _NAV NUM NUM_LCK NAV NAV_LCK
        #define DEFAULT_LAYERS BAS GA2 GA3 _NUM FUN SYM _NAV NUM NUM_LCK NAV NAV_LCK
        #define ALL_LAYERS BAS GA1 GA2 GA3 _NUM FUN SYM _NAV NUM NUM_LCK NAV NAV_LCK

        COMBO(l_bail    , &bail     , 30 31, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(r_bail    , &bail     , 34 35, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(tab       , &kp TAB   , 13 31, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(del       , &kp DEL   , 16 34, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(caps_word , &caps_word, 31 34, DEFAULT_TIME, DEFAULT_LAYERS)

        COMBO(num_bspc  , &kp BSPC  , 15 16, DEFAULT_TIME, NUM           )
        COMBO(num_comma , &kp COMMA , 6  16, DEFAULT_TIME, NUM           )
        COMBO(num_space , &kp SPACE , 7  17, DEFAULT_TIME, NUM           )

        COMBO(l_sk_ctrl , &sk LCTRL , 13 23, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(l_sk_shift, &sk LSHIFT, 12 22, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(l_sk_alt  , &sk LALT  , 11 21, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(l_win     , &kp LWIN  , 10 20, DEFAULT_TIME, LWIN_LAYERS   )

        COMBO(r_sk_ctrl , &sk LCTRL , 16 26, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(r_sk_shift, &sk RSHIFT, 17 27, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(r_sk_alt  , &sk RALT  , 18 28, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(r_win     , &kp LWIN  , 19 29, DEFAULT_TIME, DEFAULT_LAYERS)
    };

    behaviors {
        bt_sel: tap_dance_bluetooth_select {
            compatible = "zmk,behavior-tap-dance"; label = "Bluetooth Select";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&bt BT_SEL 0>, <&bt BT_SEL 1>, <&bt BT_SEL 2>;
        };

        n0_: tap_dance_n0_ {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_N0_N9";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp N0>, <&kp N1>, <&kp N2>, <&kp N3>, <&kp N4>,
                       <&kp N5>, <&kp N6>, <&kp N7>, <&kp N8>, <&kp N9>;
        };

        f1_: tap_dance_f1_ {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_F1_F24";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp F1>, <&kp F2>, <&kp F3>, <&kp F4>,
                       <&kp F5>, <&kp F6>, <&kp F7>, <&kp F8>,
                       <&kp F9>, <&kp F10>, <&kp F11>, <&kp F12>,
                       <&kp F13>, <&kp F14>, <&kp F15>, <&kp F16>,
                       <&kp F17>, <&kp F18>, <&kp F19>, <&kp F20>,
                       <&kp F22>, <&kp F23>, <&kp F24>;
        };

        f5_: tap_dance_f5_ {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_F5_F24";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp F5>, <&kp F6>, <&kp F7>, <&kp F8>,
                       <&kp F9>, <&kp F10>, <&kp F11>, <&kp F12>,
                       <&kp F13>, <&kp F14>, <&kp F15>, <&kp F16>,
                       <&kp F17>, <&kp F18>, <&kp F19>, <&kp F20>,
                       <&kp F22>, <&kp F23>, <&kp F24>;
        };

        f9_: tap_dance_f9_ {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_F9_F24";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp F9>, <&kp F10>, <&kp F11>, <&kp F12>,
                       <&kp F13>, <&kp F14>, <&kp F15>, <&kp F16>,
                       <&kp F17>, <&kp F18>, <&kp F19>, <&kp F20>,
                       <&kp F22>, <&kp F23>, <&kp F24>;
        };

        media: tap_dance_media {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MEDIA";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        output: tap_output {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_OUTPUT";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&out OUT_USB>, <&out OUT_BLE>;
        };

        esc_tab: mod_morph_esc_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "ESC_TAB";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp TAB>;
            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LALT|MOD_RALT)>;
        };

        et_l: esc_tab_layer_x {
            compatible = "zmk,behavior-hold-tap";
            label = "ESC_TAB_LAYER";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            bindings = <&mo>, <&esc_tab>;
        };

        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        // No way to cancel sticky keys so using F24 as a NOOP proxy
        // Bailing out of any sticky keyboard state macro
        bail: macro_bail {
            label = "MACRO_BAIL";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp F24 &to BAS>;
        };
    };
};

&sl { release-after-ms = <800>; no-sticky-after-hold-ms = <400>; };
&sk { release-after-ms = <800>; no-sticky-after-hold-ms = <400>; quick-release; };
&lt { flavor = "balanced"; tapping-term-ms = <222>; };
&caps_word { continue-list = <UNDERSCORE MINUS BSPC>; };

// Empty keymap
// &trans &trans &trans &trans &trans /* */ &trans &trans &trans &trans &trans
// &trans &trans &trans &trans &trans /* */ &trans &trans &trans &trans &trans
// &trans &trans &trans &trans &trans /* */ &trans &trans &trans &trans &trans
//               &trans &trans &trans /* */ &trans &trans &trans

